---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Create app connector group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_app_connector_group/create_app_connector_group.yml

- name: Verify app connector group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_app_connector_group/verify_app_connector_group.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    acg_key_name: "{{ acg_key_name }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZPA_CLIENT_ID
    - ZPA_CLIENT_SECRET
    - ZPA_CUSTOMER_ID
  loop_control:
    loop_var: env_var

- name: Ensure ZPA Credential environment variables are set
  ansible.builtin.set_fact:
    zpa_cloud:
      client_id: "{{ lookup('env', 'ZPA_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZPA_CLIENT_SECRET') }}"
      customer_id: "{{ lookup('env', 'ZPA_CUSTOMER_ID') }}"
      cloud: "{{ lookup('env', 'ZPA_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Provisioning Key
  block:
    - name: Ensure Connector Provisioning Key is absent (cleanup before testing)
      zscaler.zpacloud.zpa_provisioning_key:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ acg_key_name }}"
        key_type: "{{ key_type }}"
        max_usage: "{{ acg_max_usage }}"
        component_id: "{{ app_connector_group_id }}"
      register: delete_result

    - name: Verify Connector Provisioning Key is absent
      ansible.builtin.assert:
        that:
          - not delete_result.changed or delete_result.data is not defined # Ensure no data returned if absent

    - name: Ensure Connector Provisioning Key is present (creation)
      zscaler.zpacloud.zpa_provisioning_key:
        provider: "{{ zpa_cloud }}"
        state: present
        name: "{{ acg_key_name }}"
        key_type: "{{ key_type }}"
        max_usage: "{{ acg_max_usage }}"
        component_id: "{{ app_connector_group_id }}"
      register: create_result

    - name: Verify Connector Provisioning Key is created and enabled
      ansible.builtin.assert:
        that:
          - create_result.changed
          - create_result.data is defined
          - create_result.data.name == acg_key_name
          - create_result.data.enabled is true

    - name: Ensure Connector Provisioning Key is present (idempotency check)
      zscaler.zpacloud.zpa_provisioning_key:
        provider: "{{ zpa_cloud }}"
        state: present
        name: "{{ acg_key_name }}"
        key_type: "{{ key_type }}"
        max_usage: "{{ acg_max_usage }}"
        component_id: "{{ app_connector_group_id }}"
      register: idempotency_check_result

    - name: Debug Idempotency Check Result
      ansible.builtin.debug:
        var: idempotency_check_result

    - name: Verify idempotency for Connector Provisioning Key presence
      ansible.builtin.assert:
        that:
          - not idempotency_check_result.changed
          - idempotency_check_result.data is defined
          - idempotency_check_result.data.name == acg_key_name

    - name: Fetch all Connector Provisioning Keys
      zscaler.zpacloud.zpa_provisioning_key_info:
        provider: "{{ zpa_cloud }}"
        key_type: "{{ key_type }}"
      register: fetch_all_result

    - name: Verify all Connector Provisioning Keys are found
      ansible.builtin.assert:
        that:
          - fetch_all_result.provisioning_keys is defined
          - fetch_all_result.provisioning_keys | length > 0

    - name: Fetch specific Connector Provisioning Key by name
      zscaler.zpacloud.zpa_provisioning_key_info:
        provider: "{{ zpa_cloud }}"
        name: "{{ acg_key_name }}"
        key_type: "{{ key_type }}"
      register: fetch_specific_result

    - name: Verify specific Connector Provisioning Key is found
      ansible.builtin.assert:
        that:
          - fetch_specific_result.provisioning_keys is defined
          - fetch_specific_result.provisioning_keys[0].name == acg_key_name
          - fetch_specific_result.provisioning_keys[0].enabled is true

    - name: Pause for 5 seconds for ZPA Cloud to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Connector Provisioning Key
      zscaler.zpacloud.zpa_provisioning_key:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ acg_key_name }}"
        # enabled: "{{ key_enabled }}"
        key_type: "{{ key_type }}"
        max_usage: "{{ acg_max_usage }}"
        component_id: "{{ app_connector_group_id }}"
      register: delete_again_result

    - name: Verify Connector Provisioning Key is deleted
      ansible.builtin.assert:
        that:
          - delete_again_result.changed

    - name: Verify Connector Provisioning Key is absent (final idempotency check)
      zscaler.zpacloud.zpa_provisioning_key:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ acg_key_name }}"
        key_type: "{{ key_type }}"
        component_id: "{{ app_connector_group_id }}"
        max_usage: "{{ acg_max_usage }}"
      register: final_absence_check

    - name: Ensure idempotency when Connector Provisioning Key is already absent
      ansible.builtin.assert:
        that:
          - not final_absence_check.changed

    - name: Clean up App Connector group
      ansible.builtin.include_tasks: ../../../helper_tasks/zpa_app_connector_group/delete_app_connector_group.yml
