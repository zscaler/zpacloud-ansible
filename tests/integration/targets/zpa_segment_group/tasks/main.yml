---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    appended_name: "{{ group_name }}_{{ random_string }}"
    appended_description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZPA_CUSTOMER_ID
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZPA Credential environment variables are set
  ansible.builtin.set_fact:
    zpa_cloud:
      client_id: '{{ lookup("env", "ZSCALER_CLIENT_ID") }}'
      client_secret: '{{ lookup("env", "ZSCALER_CLIENT_SECRET") | default(omit) }}'
      vanity_domain: '{{ lookup("env", "ZSCALER_VANITY_DOMAIN") | default(omit) }}'
      customer_id: '{{ lookup("env", "ZPA_CUSTOMER_ID") | default(omit) }}'
      cloud: '{{ lookup("env", "ZSCALER_CLOUD") | default(omit) }}'
  no_log: true

- name: Main block to Test Segment Group
  block:
    - name: Ensure Segment Group is absent (leftover)
      zscaler.zpacloud.zpa_segment_group:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ appended_name }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Segment Group is absent
      zscaler.zpacloud.zpa_segment_group:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Verify Segment Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    # Create Segment Groups (Present)
    - name: Ensure Segment Group is (Present)
      zscaler.zpacloud.zpa_segment_group:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
      register: result

    - name: Verify Segment Group is present
      ansible.builtin.assert:
        that:
          - result.data
          - result.data.name is defined
          - result.data.enabled is true

    - name: Create the Segment Group (again; idempotency check)
      zscaler.zpacloud.zpa_segment_group:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
      register: result

    - name: Ensure Segment Group is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Segment Groups
      zscaler.zpacloud.zpa_segment_group_info:
        provider: "{{ zpa_cloud }}"
      register: result

    - name: Ensure all Segment Groups found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.groups[0] is defined

    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Segment Group
      zscaler.zpacloud.zpa_segment_group:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
      register: result

    - name: Verify Segment Group is absent
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Segment Group (again; idempotency check)
      zscaler.zpacloud.zpa_segment_group:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
      register: result

    - name: Verify Segment Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
