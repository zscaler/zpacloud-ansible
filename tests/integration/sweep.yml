---
- name: List all Application Segments
  zscaler.zpacloud.zpa_application_segment_info:
    provider: "{{ zpa_cloud }}"
  register: all_application_segments

- name: Delete all test Application Segments
  zscaler.zpacloud.zpa_application_segment:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_application_segments.app_segments | default([]) }}"
  when:
    - all_application_segments.app_segments is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_app_segments

- name: List all Segment Groups
  zscaler.zpacloud.zpa_segment_group_info:
    provider: "{{ zpa_cloud }}"
  register: all_segment_groups

- name: Delete all test Segment Groups
  zscaler.zpacloud.zpa_segment_group:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_segment_groups.groups | default([]) }}"
  when:
    - all_segment_groups.groups is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_segment_groups

- name: List all Server Groups
  zscaler.zpacloud.zpa_server_group_info:
    provider: "{{ zpa_cloud }}"
  register: all_server_groups

- name: Delete all test Server Groups
  zscaler.zpacloud.zpa_server_group:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_server_groups.groups | default([]) }}"
  when:
    - all_server_groups.groups is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_server_groups

- name: List all App Connector Groups
  zscaler.zpacloud.zpa_app_connector_group_info:
    provider: "{{ zpa_cloud }}"
  register: all_app_connector_groups

- name: Delete all test App Connector Groups
  zscaler.zpacloud.zpa_app_connector_groups:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_app_connector_groups.groups | default([]) }}"
  when:
    - all_app_connector_groups.groups is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_app_connector_groups

- name: List all Provisioning Keys
  zscaler.zpacloud.zpa_provisioning_key_info:
    provider: "{{ zpa_cloud }}"
    key_type: "{{ key_type }}"
  register: all_ac_provisioning_keys

- name: Delete all test Provisioning Keys
  zscaler.zpacloud.zpa_provisioning_key:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
    key_type: "{{ item.key_type }}"
  loop: "{{ all_ac_provisioning_keys.provisioning_keys | default([]) }}"
  when:
    - all_ac_provisioning_keys.provisioning_keys is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_provisioning_keys

- name: List all Service Edge Groups
  zscaler.zpacloud.zpa_service_edge_groups_info:
    provider: "{{ zpa_cloud }}"
  register: all_service_edge_groups

- name: Delete all test Service Edge Groups
  zscaler.zpacloud.zpa_service_edge_groups:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_service_edge_groups.groups | default([]) }}"
  when:
    - all_service_edge_groups.groups is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_service_edge_groups

- name: List all Application Servers
  zscaler.zpacloud.zpa_application_server_info:
    provider: "{{ zpa_cloud }}"
  register: all_application_servers

- name: Delete all test Application servers
  zscaler.zpacloud.zpa_application_server:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_application_servers.servers | default([]) }}"
  when:
    - all_application_servers.servers is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_application_servers

- name: List all Policy Access Timeout Rules
  zscaler.zpacloud.zpa_policy_access_rule_info:
    provider: "{{ zpa_cloud }}"
    policy_type: timeout
  register: all_policy_access_timeout

- name: Delete all test Policy Access Timeout Rules
  zscaler.zpacloud.zpa_policy_access_timeout_rule:
    provider: "{{ zpa_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_policy_access_timeout.policy_rules | default([]) }}"
  when:
    - all_policy_access_timeout.policy_rules is defined
    - "'test_' in (item.name | default(''))"
  ignore_errors: true
  register: delete_timeout_rules

- name: Show cleanup errors for any failed deletions
  ansible.builtin.debug:
    msg: "Failed to delete {{ item.item.name | default('unknown') }}: {{ item.msg | default('Unknown error') }}"
  loop: >-
    {{
      (delete_app_segments.results | default([])) +
      (delete_ba_segments.results | default([])) +
      (delete_segment_groups.results | default([])) +
      (delete_server_groups.results | default([])) +
      (delete_app_connector_groups.results | default([])) +
      (delete_provisioning_keys.results | default([])) +
      (delete_service_edge_groups.results | default([])) +
      (delete_application_servers.results | default([])) +
      (delete_timeout_rules.results | default([]))
    }}
  when: item.failed | default(false)
  loop_control:
    label: "{{ item.item.name | default('unknown') }}"

- name: Set fact for overall status
  ansible.builtin.set_fact:
    sweep_successful: >-
      {{
        not (
          (delete_app_segments.failed | default(false)) or
          (delete_ba_segments.failed | default(false)) or
          (delete_segment_groups.failed | default(false)) or
          (delete_server_groups.failed | default(false)) or
          (delete_app_connector_groups.failed | default(false)) or
          (delete_provisioning_keys.failed | default(false)) or
          (delete_service_edge_groups.failed | default(false)) or
          (delete_application_servers.failed | default(false)) or
          (delete_timeout_rules.failed | default(false))
        )
      }}

- name: Print success message ✅
  ansible.builtin.debug:
    msg: Tenant sweep successfully completed!
  when: sweep_successful

- name: Print failure message ❌
  ansible.builtin.debug:
    msg: Tenant sweep incomplete. Please check the above logs for errors.
  when: not sweep_successful
