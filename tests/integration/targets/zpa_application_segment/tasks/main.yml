---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Create segment group
  ansible.builtin.import_tasks: ../../../helper_tasks/zpa_segment_group/create_segment_group.yml

- name: Verify segment group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_segment_group/verify_segment_group.yml

- name: Create server group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_server_group/create_server_group.yml

- name: Verify server group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_server_group/verify_server_group.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    appended_name: "{{ seg_name }}_{{ random_string }}"
    appended_description: "{{ app_segment_description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZPA_CUSTOMER_ID
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zpa_cloud:
      client_id: '{{ lookup("env", "ZSCALER_CLIENT_ID") }}'
      client_secret: '{{ lookup("env", "ZSCALER_CLIENT_SECRET") | default(omit) }}'
      vanity_domain: '{{ lookup("env", "ZSCALER_VANITY_DOMAIN") | default(omit) }}'
      customer_id: '{{ lookup("env", "ZPA_CUSTOMER_ID") | default(omit) }}'
      cloud: '{{ lookup("env", "ZSCALER_CLOUD") | default(omit) }}'
  no_log: true

- name: Main block to Test Application Segment
  block:
    - name: Ensure Application Segment is absent (leftover)
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Application Segment is absent
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    # Create Application Segments (Present)
    - name: Ensure Application Segment is (Present)
      zscaler.zpacloud.zpa_application_segment:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined
          - result.data.name == appended_name
          - result.data.enabled == true

    - name: Create the Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Fetch all Application Segments
      zscaler.zpacloud.zpa_application_segment_info:
        provider: "{{ zpa_cloud }}"
      register: result

    - name: Ensure all Application Segments found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.app_segments[0] is defined

    - name: Fetch this Application Segment
      zscaler.zpacloud.zpa_application_segment_info:
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Ensure this Application Segments is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.app_segments is defined
          - result.app_segments[0].name is defined
          - result.app_segments[0].name == appended_name
          - result.app_segments[0].enabled == true

    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Application Segment
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Application Segment (again; idempotency check)
      zscaler.zpacloud.zpa_application_segment:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        enabled: "{{ enabled }}"
        double_encrypt: "{{ double_encrypt }}"
        is_cname_enabled: "{{ is_cname_enabled }}"
        tcp_keep_alive: "{{ tcp_keep_alive }}"
        passive_health_enabled: "{{ passive_health_enabled }}"
        select_connector_close_to_app: "{{ select_connector_close_to_app }}"
        ip_anchored: "{{ ip_anchored }}"
        use_in_dr_mode: "{{ use_in_dr_mode }}"
        is_incomplete_dr_config: "{{ is_incomplete_dr_config }}"
        inspect_traffic_with_zia: "{{ inspect_traffic_with_zia }}"
        health_check_type: "{{ health_check_type }}"
        health_reporting: "{{ health_reporting }}"
        bypass_type: "{{ bypass_type }}"
        icmp_access_type: "{{ icmp_access_type }}"
        tcp_port_range: "{{ tcp_port_range }}"
        domain_names: "{{ domain_names }}"
        segment_group_id: "{{ segment_group_id }}"
        server_group_ids:
          - "{{ server_group_id }}"
      register: result

    - name: Verify Application Segment is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

- name: Clean up segment group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_segment_group/delete_segment_group.yml

- name: Clean up server group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_server_group/delete_server_group.yml

- name: Clean up App Connector group
  ansible.builtin.include_tasks: ../../../helper_tasks/zpa_app_connector_group/delete_app_connector_group.yml
