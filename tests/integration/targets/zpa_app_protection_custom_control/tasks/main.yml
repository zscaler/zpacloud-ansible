---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    appended_name: "{{ custom_name }}_{{ random_string }}"
    appended_description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZSCALER_CLIENT_ID
    - ZSCALER_CLIENT_SECRET
    - ZSCALER_VANITY_DOMAIN
    - ZSCALER_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      client_id: "{{ lookup('env', 'ZSCALER_CLIENT_ID') }}"
      client_secret: "{{ lookup('env', 'ZSCALER_CLIENT_SECRET') }}"
      vanity_domain: "{{ lookup('env', 'ZSCALER_VANITY_DOMAIN') }}"
      cloud: "{{ lookup('env', 'ZSCALER_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test App Protection Custom Control
  block:
    - name: Ensure App Protection Custom Control is absent (leftover)
      zscaler.zpacloud.zpa_app_protection_custom_control:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ appended_name }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure App Protection Custom Control is absent
      zscaler.zpacloud.zpa_app_protection_custom_control:
        state: absent
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Verify App Protection Custom Control is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    # Create App Protection Profile (Present)
    - name: Ensure App Protection Custom Control is (Present)
      zscaler.zpacloud.zpa_app_protection_custom_control:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        action: "{{ custom_action }}"
        default_action: "{{ default_action }}"
        paranoia_level: "{{ paranoia_level }}"
        type: "{{ type }}"
        protocol_type: "{{ protocol_type }}"
        severity: "{{ severity }}"
        rules:
          - conditions:
              - lhs: VALUE
                op: RX
                rhs: test
              - lhs: SIZE
                op: EQ
                rhs: "1000"
            names:
              - example1
              - example2
              - example3
            type: REQUEST_HEADERS

          - conditions:
              - lhs: VALUE
                op: RX
                rhs: test

              - lhs: SIZE
                op: LE
                rhs: "1000"
            names:
              - example1
              - example2
              - example3
            type: REQUEST_COOKIES

          - conditions:
              - lhs: SIZE
                op: EQ
                rhs: "1000"

              - lhs: VALUE
                op: CONTAINS
                rhs: test-ansible
            type: REQUEST_URI

          - conditions:
              - lhs: SIZE
                op: EQ
                rhs: "1000"

              - lhs: VALUE
                op: STARTS_WITH
                rhs: test-ansible
            type: QUERY_STRING

      register: result

    - name: Verify App Protection Custom Control is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.name is defined
          - result.data.name == appended_name

    - name: Create the App Protection Custom Control (again; idempotency check)
      zscaler.zpacloud.zpa_app_protection_custom_control:
        state: present
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
        description: "{{ appended_description }}"
        action: "{{ custom_action }}"
        default_action: "{{ default_action }}"
        paranoia_level: "{{ paranoia_level }}"
        type: "{{ type }}"
        protocol_type: "{{ protocol_type }}"
        severity: "{{ severity }}"
        rules:
          - conditions:
              - lhs: VALUE
                op: RX
                rhs: test
              - lhs: SIZE
                op: EQ
                rhs: "1000"
            names:
              - example1
              - example2
              - example3
            type: REQUEST_HEADERS

          - conditions:
              - lhs: VALUE
                op: RX
                rhs: test

              - lhs: SIZE
                op: LE
                rhs: "1000"
            names:
              - example1
              - example2
              - example3
            type: REQUEST_COOKIES

          - conditions:
              - lhs: SIZE
                op: EQ
                rhs: "1000"

              - lhs: VALUE
                op: CONTAINS
                rhs: test-ansible
            type: REQUEST_URI

          - conditions:
              - lhs: SIZE
                op: EQ
                rhs: "1000"

              - lhs: VALUE
                op: STARTS_WITH
                rhs: test-ansible
            type: QUERY_STRING

      register: result

    - name: Verify App Protection Custom Control is present (again; idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all App Protection Custom Control
      zscaler.zpacloud.zpa_app_protection_custom_control_info:
        provider: "{{ zpa_cloud }}"
      register: result

    - name: Ensure all App Protection Custom Control are found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.controls[0] is defined

    - name: Fetch this App Protection Custom Control
      zscaler.zpacloud.zpa_app_protection_custom_control_info:
        provider: "{{ zpa_cloud }}"
        name: "{{ appended_name }}"
      register: result

    - name: Ensure this App Protection Custom Control is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.controls is defined
          - result.controls[0].name is defined
          - result.controls[0].name == appended_name

    - name: Give the ZPA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete App Protection Custom Control
      zscaler.zpacloud.zpa_app_protection_custom_control:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ appended_name }}"
      register: result

    - name: Verify App Protection Custom Control is absent
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete App Protection Custom Control (again; idempotency check)
      zscaler.zpacloud.zpa_app_protection_custom_control:
        provider: "{{ zpa_cloud }}"
        state: absent
        name: "{{ appended_name }}"
      register: result

    - name: Verify App Protection Custom Control is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
